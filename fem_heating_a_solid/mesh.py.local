import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import Polygon


def make_mesh(length, height, min_element_size):
    assert min_element_size <= min(length, height)
    numberOfNodes_l, numberOfNodes_h = int(length // min_element_size + 1), int(height // min_element_size + 1)
    step_w, step_l = length / (numberOfNodes_l - 1), height / (numberOfNodes_h - 1)

    nodes = np.empty((numberOfNodes_l, numberOfNodes_h), dtype=tuple)
    frontier = np.zeros(nodes.shape, dtype=bool)

    for i in range(numberOfNodes_l):
        for j in range(numberOfNodes_h):
            nodes[i, j] = (i * step_w, j * step_l)
            if (j == numberOfNodes_h or j == 0) and (i == numberOfNodes_l or i == 0):
                frontier[i, j] = True
    # print(nodes.shape)
    # print(nodes)
    """
    ---------------- QUADRANGLES ------------------
    elements = np.empty(((numberOfNodes_l - 1) * (numberOfNodes_h - 1), 4), dtype=tuple)
    for i in range(numberOfNodes_l - 1):
        for j in range(numberOfNodes_h - 1):
            elements[(numberOfNodes_h - 1) * i + j, :] = [(i, j), (i+1, j), (i+1, j+1), (i, j+1)]
    """
    
    elements = np.empty((2 * (numberOfNodes_h-1) * (numberOfNodes_l-1), 3), dtype=tuple)
    for j in range(numberOfNodes_h - 1):
        for i in range(numberOfNodes_l - 1):
            elements[2 * (i + (numberOfNodes_l - 1) * j), :] = ([(i, j), (i + 1, j), (i, j + 1)])
            elements[2 * (i + (numberOfNodes_l - 1) * j) + 1, :] = ([(i + 1, j), (i + 1, j + 1), (i, j + 1)])
            # print(f"2*({i} + {numberOfNodes_l - 1} * {j}) = {2 * (i + (numberOfNodes_l - 1) * j)}")
    # print(elements)
    
    domain = np.ones(elements.shape[0])
    # print(elements.shape)
    return {
            "nn": nodes.size, "ne": elements.size,
            "nodes": nodes, "elements": elements,
            "frontier": frontier, "domain": domain
            }


def show_mesh(_mesh):
    fig, ax = plt.subplots()
    nodes = _mesh["nodes"]
    if _mesh["elements"].shape[1] == 3:
        for elt in _mesh["elements"]:
            n1, n2, n3 = nodes[elt[0]], nodes[elt[1]], nodes[elt[2]]
            # print("elt:", elt)
            p = Polygon([n1, n2, n3], ec="black")
            ax.add_patch(p)
    elif _mesh["elements"].shape[1] == 4:
        for elt in _mesh["elements"]:
            n1, n2, n3, n4 = nodes[elt[0]], nodes[elt[1]], nodes[elt[2]], nodes[elt[3]]
            # print("elt:", elt)
            p = Polygon([n1, n2, n3, n4], ec="black")
            ax.add_patch(p)
    else:
        raise Exception("Trying to plot a mesh with unknown elements' shape")

    _w, _l = nodes[-1, -1][0], nodes[-1, -1][1]
    ax.set_xlim([-1e-2, _w+1e-2])
    ax.set_ylim([-1e-2, _l+1e-2])
    ax.set_aspect("equal", "box")
    plt.show()


if __name__ == "__main__":
    m = make_mesh(10, 3, 0.5)
    show_mesh(m)
